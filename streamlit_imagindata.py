# -*- coding: utf-8 -*-
"""streamlit_imagindata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T_P50jsy4XBqe_DMLVNmY1FoAPRNbIb9
"""


import streamlit as st
import numpy as np
import seaborn as sns
import pandas as pd
from sklearn.neighbors import NearestNeighbors
from sklearn.preprocessing import StandardScaler
import requests
from googletrans import Translator
import random 


#D√©finir le th√®me personnalis√©

st.set_page_config(page_title="üé• App de Recommandation de films", page_icon=":üéûÔ∏è:", layout="wide", initial_sidebar_state="expanded")

page_bg_img = """
<style>
[data-testid = "stAppViewContainer"] {
primaryColor: "#3498db";
background-color: "#f0f0f0";
secondaryBackgroundColor: "#d3d3d3";
textColor: "#2c3e50";
font: "sans-serif";
opacity: 0.8;
background-image: radial-gradient(#444cf7 0.5px, #e5e5f7 0.5px);
background-size: 10px 10px; }
</style>
"""


# TITRE
st.title("üé• App de Recommandation de films")

# SOUS TITRE
st.header("Dis moi quels sont tes go√ªts et je te ferai d√©couvrir de nouveaux films üí°üé¨")



#Fonction pour traduire le texte
def translate_page(page_content, target_language='en'):
    translator = Translator()
    translated_content = translator.translate(page_content, dest=target_language)
    return translated_content.text

def main():
    st.title("App de Recommandation de films")

    # Contenu initial
    page_content = """
    Bienvenue dans cette application de recommandation de films.
    Essayez de cliquer sur le bouton de traduction pour voir le contenu dans une autre langue!
    """

    # Affichage du contenu initial
    st.markdown(page_content)

    # Bouton de traduction
    if st.button("Traduire en anglais"):
        translated_content = translate_page(page_content, target_language='en')
        st.markdown(translated_content)

if __name__ == "__main__":
    main()

#CHARGER LES DATAFRAMES
    
#Remplacez l'URL par l'URL brute de votre fichier CSV sur GitHub
#Charger le fichier CSV dans un DataFrame
df_KNN = pd.read_csv("https://raw.githubusercontent.com/IMAGINEDATA1/APP/main/t_KNN")


# REQUETE API


# Fonction pour obtenir les informations d'un film √† partir de l'API TMDb
def get_movie_details(movie_id):
    api_key = "db38952c66997974559ef641200fc25e"
    base_url = "https://api.themoviedb.org/3/movie/"
    endpoint = str(movie_id)
    url = f"{base_url}{endpoint}?api_key={api_key}"

    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None


        # Obtenir les informations du film depuis l'API TMDb
        tmdb_movie_details = get_movie_details(movie_details['MovieDB_ID'])

        if tmdb_movie_details:
            # Afficher l'image du film
            st.image(f"https://image.tmdb.org/t/p/w500/{tmdb_movie_details['poster_path']}", caption=movie_title, use_column_width=True)

            # Afficher le titre, la tagline et l'aper√ßu en survol de la souris
            st.markdown(f"**Titre:** {tmdb_movie_details['primaryTitle']}")
            st.markdown(f"**Tagline:** {tmdb_movie_details['tagline']}")
            st.markdown(f"**Aper√ßu:** {tmdb_movie_details['overview']}")

            # Afficher d'autres d√©tails du film
            st.write(f"**Note IMDb:** {movie_details['averageRating']}")
            st.write(f"**Nombre de votes:** {tmdb_movie_details['vote_count']}")
            st.write(f"**Dur√©e:** {tmdb_movie_details['runtimeMinutes']} minutes")
            st.write(f"**Genre:** {', '.join([genre['primaryName'] for genre in tmdb_movie_details['genre1']])}")

            # Acteurs
            st.write("**Acteurs:**")
            for cast_member in tmdb_movie_details['credits']['cast'][:3]:
                st.write(f"- {cast_member['primaryName']}")

            # R√©alisateurs
            st.write("**R√©alisateurs:**")
            for crew_member in tmdb_movie_details['credits']['crew']:
                if crew_member['job'] == 'Director':
                    st.write(f"- {crew_member['primaryName']}")

                else:
                    st.info("Commencez √† taper pour rechercher des films.")





# Cr√©ation d'une barre de recherche avec autocompl√©tion et KNN


# Cr√©ation de la recommandation bas√©e sur KNN


# Cr√©er une barre de recherche avec autocompl√©tion

# Utilisateur saisit nom du film
user_input_film = st.text_input("Tapez votre recherche", " ")

# Check si nom du film est dans le df
if user_input_film in df_KNN['primaryTitle'].values:
    # Extraire les caract√©ristiques du film saisi par l'utilisateur
    user_film_features = df_KNN.loc[df_KNN['primaryTitle'] == user_input_film, ['startYear', 'original_language', 'Action', 'Adventure', 'Biography', 'Crime', 'Mystery']]

    # Entra√Æner le mod√®le sur l'ensemble complet des caract√©ristiques
    X_all = df_KNN[['startYear', 'original_language', 'Action', 'Adventure', 'Biography', 'Crime', 'Mystery']].values
    modelNN = NearestNeighbors(n_neighbors=5)
    modelNN.fit(X_all)

    # D√©finition des voisins les plus proches du film saisi par l'utilisateur
    neighbors = modelNN.kneighbors(user_film_features.values)
    neighbors_indices = neighbors[1][0]

    # Filtrer les voisins pour ne prendre que ceux avec le m√™me 'original_language'
    user_language = user_film_features['original_language'].values[0]
    filtered_neighbors_indices = [index for index in neighbors_indices if df_KNN.loc[index, 'original_language'] == user_language]

    # Exclusion du film saisi par l'utilisateur de la liste des recommandations
    filtered_neighbors_indices = [index for index in filtered_neighbors_indices if index != df_KNN[df_KNN['primaryTitle'] == user_input_film].index[0]]

    # R√©sultats recommandations
    neighbors_names = df_KNN['primaryTitle'].iloc[filtered_neighbors_indices]

    st.write(f"\nPour : {user_input_film}")
    st.write(neighbors_names)

else:
    # Si le film n'a pas √©t√© trouv√©
    st.write(f"\nLe film '{user_input_film}' n'a pas √©t√© trouv√© dans la base de donn√©es.")

    # 4 films choisis al√©atoirement comme recommandations
    random_recos = random.sample(df_KNN['primaryTitle'].tolist(), 4)

    st.write("Vous ne trouvez pas ? Voici quelques unes de mes id√©es :")
    st.write(random_recos)





# SOUS-TITRE
st.subheader("Bonne s√©ance ! üçøüçøüçø ")

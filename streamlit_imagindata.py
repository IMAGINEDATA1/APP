# -*- coding: utf-8 -*-
"""streamlit_imagindata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T_P50jsy4XBqe_DMLVNmY1FoAPRNbIb9
"""

#pip install --upgrade streamlit

#pip install googletrans

#pip install streamlit

import streamlit as st
import numpy as np
import seaborn as sns
import pandas as pd
from sklearn.neighbors import NearestNeighbors
import requests
from googletrans import Translator

#Fonction pour traduire le texte
def translate_text(text, target_lang):
    translator = Translator()
    translation = translator.translate(text, dest=target_lang)
    return translation.text

#CHARGER LES DATAFRAMES
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

df_KNN = pd.read_csv('/content/drive/MyDrive/BDD CLEAN/t_KNN_2', sep='\t')

#D√©finir le th√®me personnalis√©

st.set_page_config(page_title="üé• App de Recommandation de films", page_icon=":üéûÔ∏è:", layout="wide", initial_sidebar_state="expanded")

page_bg_img = """
<style>
[data-testid = "stAppViewContainer"] {
primaryColor: "#3498db";
background-color: "#f0f0f0";
secondaryBackgroundColor: "#d3d3d3";
textColor: "#2c3e50";
font: "sans-serif";
opacity: 0.8;
background-image: radial-gradient(#444cf7 0.5px, #e5e5f7 0.5px);
background-size: 10px 10px; }
</style>
"""


# TITRE
st.title("üé• App de Recommandation de films")

# SOUS TITRE
st.header("Dis moi quels sont tes go√ªts et je te ferai d√©couvrir de nouveaux films üí°üé¨")



# REQUETE API


# Fonction pour obtenir les informations d'un film √† partir de l'API TMDb
def get_movie_details(movie_id):
    api_key = "db38952c66997974559ef641200fc25e"
    base_url = "https://api.themoviedb.org/3/movie/"
    endpoint = str(movie_id)
    url = f"{base_url}{endpoint}?api_key={api_key}"

    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None


        # Obtenir les informations du film depuis l'API TMDb
        tmdb_movie_details = get_movie_details(movie_details['MovieDB_ID'])

        if tmdb_movie_details:
            # Afficher l'image du film
            st.image(f"https://image.tmdb.org/t/p/w500/{tmdb_movie_details['poster_path']}", caption=movie_title, use_column_width=True)

            # Afficher le titre, la tagline et l'aper√ßu en survol de la souris
            st.markdown(f"**Titre:** {tmdb_movie_details['primaryTitle']}")
            st.markdown(f"**Tagline:** {tmdb_movie_details['tagline']}")
            st.markdown(f"**Aper√ßu:** {tmdb_movie_details['overview']}")

            # Afficher d'autres d√©tails du film
            st.write(f"**Note IMDb:** {movie_details['averageRating']}")
            st.write(f"**Nombre de votes:** {tmdb_movie_details['vote_count']}")
            st.write(f"**Dur√©e:** {tmdb_movie_details['runtimeMinutes']} minutes")
            st.write(f"**Genre:** {', '.join([genre['primaryName'] for genre in tmdb_movie_details['genre1']])}")

            # Acteurs
            st.write("**Acteurs:**")
            for cast_member in tmdb_movie_details['credits']['cast'][:3]:
                st.write(f"- {cast_member['primaryName']}")

            # R√©alisateurs
            st.write("**R√©alisateurs:**")
            for crew_member in tmdb_movie_details['credits']['crew']:
                if crew_member['job'] == 'Director':
                    st.write(f"- {crew_member['primaryName']}")

                else:
                    st.info("Commencez √† taper pour rechercher des films.")





# Cr√©ation d'une barre de recherche avec autocompl√©tion et KNN


# Cr√©er une fonction pour la recommandation bas√©e sur KNN

X = df_KNN[['runtimeMinutes','averageRating', 'numVotes', 'popularity', 'vote_average', 'vote_count', 'score_popularity',"startYear"]]
X = X.dropna()


modelNN = NearestNeighbors(n_neighbors=5)
modelNN.fit(X)

# Cr√©er une barre de recherche avec autocompl√©tion

choix_film  = st.text_input("Tapez votre recherche", " ")


film_index = df_KNN[df_KNN['primaryTitle'].str.contains(choix_film, case=False)].index[0]

neighbors = modelNN.kneighbors(df_KNN.loc[df_KNN['primaryTitle'] == df_KNN['primaryTitle'].iloc[film_index], X.columns])






# SOUS-TITRE
st.subheader("Bonne s√©ance ! üçøüçøüçø ")
